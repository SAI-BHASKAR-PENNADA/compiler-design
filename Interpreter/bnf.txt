< Program >     ::= < Program > < Statement >
                    	| < Statement >

< Statement >   ::= < Ref > < Statement' > NEWLINE
                    | < Var-Decl > NEWLINE
                    | < Record-Def >
                    | < Print > NEWLINE
                    | SCANF LPAREN < Identifier > RPAREN NEWLINE
                    | < Expression > NEWLINE
                    | IF LPAREN < Boolean_Condition > RPAREN COLON NEWLINE <Stmt_List> ENDIF NEWLINE
	                | WHILE LPAREN < Boolean_Condition > RPAREN COLON NEWLINE <Stmt_List> ENDWHILE NEWLINE

                    | CLASS < Identifier > COLON NEWLINE < Class_Body > CLASSEND NEWLINE

                    | CLASS < Identifier > DERIVED < Identifier > COLON NEWLINE < Class_Body > CLASSEND NEWLINE

                    | < Identifier > ISA < Identifer>
                    | < Identifier > DOT < Identifier > LPAREN < Argument_List > RPAREN NEWLINE
                    | < Identifier > DOT < Identifier > NEWLINE
                    | < Identifier > LPAREN < Argument_List > RPAREN NEWLINE

< Access_Modifier >  ::= PUBLIC | PRIVATE | PROTECTED | ""

< Class_Body > ::= < Func_Def > < Class_Body > | < Access_Modifier > < Var-Decl > < Class_Body > | ""

< Boolean_Condition >   ::= < Expression > LESSTHAN < EXPRESSION >
                            | < Expression > EQUALITY < EXPRESSION >
                            | < Expression > NOTEQUAL < EXPRESSION >
                            | < Expression > GREATERTHAN < EXPRESSION >

<Stmt_List>        ::= <Stmt_List> < Statement > | < Statement >

< Statement' >  ::= EQUAL < Expression >
                    | < Record-Decl' >
                    | < Expression' >

< Var-Decl >    ::= < Type > < Identifier >
                    | < Type > LBRACKET < Bounds > RBRACKET IDENTIFIER
                    | < Record-Decl >

< Func_Def >     ::= DEF < Identifier > LPAREN <Parameter_List> RPAREN COLON NEWLINE <Stmt_List>
		ENDDEF NEWLINE

< Parameter_List > ::= < Var_Decl > < Parameter_List' > | ""

< Parameter_List' >  ::= COMMA < Var_Decl > < Parameter_List' > | ""

< Argument_List >  ::= < Expression > < Argument_List' > | ""

< Argument_List' >  ::= COMMA < Expression > < Argument_List' > | ""


< Type >        ::= INTEGER | REAL

< Record-Decl > ::= IDENTIFIER < Record-Decl' >

< Record-Decl' >::= IDENTIFIER
                    | LBRACKET < Bounds > RBRACKET IDENTIFIER

< Record-Def >  ::= RECORD < Identifier > NEWLINE < Fields > END

< Fields >      ::= < Fields > < Var-Decl > NEWLINE
                    | < Var-Decl > NEWLINE

< Bounds >      ::= < Bounds > COMMA INTLIT
                    | INTLIT

< Print >       ::= PRINT < Expression > | PRINTLN < Expression > |
                    PRINT QUOTE ALPHANUMERIC QUOTE | PRINTLN QUOTE ALPHANUMERIC QUOTE

< Expression >  ::= < Term > < Expression' >

< Expression' > ::= PLUS < Term  > < Expression' >
                    | MINUS < Term > < Expression' >
                    | ""

< Term >        ::= < Factor > < Term' >

< Term' >       ::= TIMES  < Factor > < Term' >
                    | DIVIDE < Factor > < Term' >
                    | ""

< Factor >      ::= < Base > POW < Factor >
                    | < Base >

< Base >        ::= LPAREN < Expression > RPAREN
                    | MINUS < Expression >
                    | < Number >

< Number >      ::= INTLIT
                    | REALLIT
                    | < Ref >

                    | < Expression >

< Ref >         ::= IDENTIFIER < Ref' >

< Ref' >        ::= DOT < Ref >
                    | LBRACKET < Index > RBracket
                    | ""

< Index >       ::= < Index > COMMA < Expression >




Lexer Grammar
=============
NEWLINE     \n
PLUS        +
MINUS       -
TIMES       *
DIVIDE      /
POW         ^
LPAREN      (
RPAREN      )
INTLIT      [0-9]+
REALLIT     INTLINT.INTLIT
PRINT       print
IDENTIFIER  [a-zA-Z_][a-zA-Z0-9_]*
INTEGER     integer
REAL        real
EQUAL       =
RECORD      record
END         end
LBRACKET    [
RBRACKET    ]
COMMA       ,
DOT         .

